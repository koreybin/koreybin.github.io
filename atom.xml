<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>binbin</title>
  
  <subtitle>bin</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-08T08:44:58.583Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mvvm</title>
    <link href="http://yoursite.com/2020/04/08/mvvm/"/>
    <id>http://yoursite.com/2020/04/08/mvvm/</id>
    <published>2020-04-08T08:44:58.000Z</published>
    <updated>2020-04-08T08:44:58.583Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown快速入门</title>
    <link href="http://yoursite.com/2020/04/06/markdown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/04/06/markdown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-06T10:49:55.840Z</published>
    <updated>2020-04-09T07:56:19.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-快速入门-typora"><a href="#markdown-快速入门-typora" class="headerlink" title="markdown 快速入门(typora)"></a>markdown 快速入门(typora)</h1><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//英文输入法下输入```java</span></span><br><span class="line"><span class="comment">//则表示是java语言的代码</span></span><br><span class="line"><span class="comment">//这就是输入```java后的效果</span></span><br></pre></td></tr></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="六种标题："><a href="#六种标题：" class="headerlink" title="六种标题："></a>六种标题：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2033355577,2659407454&fm=26&gp=0.jpg" alt="效果图"></p><p>这里是插入的图片（插入语法）</p><p><code>！[文字叙述](url地址)</code></p><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>段落就没有要求，直接编写就好了</p><p>段落的换行可以在结尾加两个空格再回车 或者行间空一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;字体加粗</span><br><span class="line">**加粗的文字**</span><br><span class="line">&#x2F;&#x2F;删除线</span><br><span class="line">~~删除的文字~~</span><br><span class="line">&#x2F;&#x2F;斜体</span><br><span class="line">*斜体字*</span><br><span class="line">&#x2F;&#x2F;下划线</span><br><span class="line">&lt;u&gt;下划线文本&lt;&#x2F;u&gt;</span><br><span class="line">&#x2F;&#x2F;分割线</span><br><span class="line">***</span><br><span class="line">&#x2F;&#x2F;脚注</span><br><span class="line">[^要脚注的文本]:这是脚注的内容</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>加粗的文字</strong></p><p><del>删除的文字</del></p><p><em>斜体字</em></p><p><u>下划线文本</u></p><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">无序列表(*、+、- 其中一个做列表标记)</span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有序列表(数字后加. 表示第n项  n&#x3D;数字)</span><br><span class="line">1. 第一</span><br><span class="line">2. 第二</span><br><span class="line">3. 第三</span><br></pre></td></tr></table></figure><ol><li>第一</li><li>第二</li><li>第三</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">嵌套列表(换行之后四个空格后加+、*、-)</span><br><span class="line">1. 第一</span><br><span class="line">    * 内列表</span><br><span class="line">2. 第二</span><br><span class="line">    + 内列表</span><br><span class="line">3. 第三</span><br><span class="line">    - 内列表</span><br></pre></td></tr></table></figure><ol><li>第一<ul><li>内列表</li></ul></li><li>第二<ul><li>内列表</li></ul></li><li>第三<ul><li>内列表</li></ul></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;第一层</span><br><span class="line">&gt;&gt;第二层</span><br><span class="line">&gt;&gt;&gt;第三层</span><br><span class="line">&gt;将列表嵌套进去</span><br><span class="line">&gt;- 嵌套列表</span><br></pre></td></tr></table></figure><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote><blockquote><p>将列表嵌套进去</p><ul><li>嵌套列表</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">列表中使用区块 同样的也是换行4个空格</span><br><span class="line">1. 第一项</span><br><span class="line">    &gt;区块</span><br><span class="line">2. 第二项</span><br><span class="line">    &gt;区块</span><br></pre></td></tr></table></figure><ol><li><p>第一项</p><blockquote><p>陈晓滨帅</p></blockquote></li><li><p>第二项</p><blockquote><p>谭一安美</p></blockquote></li></ol><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](https:&#x2F;&#x2F;www.runoob.com&#x2F;markdown)</span><br><span class="line">也可以直接&lt;地址&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/markdown" target="_blank" rel="noopener">runoob</a></p><p><a href="https://www.runoob.com/markdown" target="_blank" rel="noopener">https://www.runoob.com/markdown</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![图片文本](url)</span><br><span class="line">![图片文本](url &quot;title&quot;)</span><br><span class="line">也可以直接链接图片地址</span><br><span class="line">[1]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png</span><br><span class="line">如果图片宽度高度不定，也可以用&lt;img&gt;标签</span><br></pre></td></tr></table></figure><p>也可以直接链接图片地址</p><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</span><br><span class="line">| 表头 | 表头 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 内容 | 内容 |</span><br></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr></tbody></table><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>结果</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>以上就是我学习markdown的笔记，都是最基础的书写方式，更多的可以到runoob上学习</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;markdown-快速入门-typora&quot;&gt;&lt;a href=&quot;#markdown-快速入门-typora&quot; class=&quot;headerlink&quot; title=&quot;markdown 快速入门(typora)&quot;&gt;&lt;/a&gt;markdown 快速入门(typora)&lt;/h1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack学习</title>
    <link href="http://yoursite.com/2020/04/06/webpack%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/06/webpack%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-06T09:03:25.022Z</published>
    <updated>2020-05-13T08:51:59.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-webpack"><a href="#Vue-js-webpack" class="headerlink" title="Vue.js webpack"></a>Vue.js webpack</h1><h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ol><li><p>js</p><ul><li>.js  .jsx    .coffee    .ts(TypeScript 类C#语言)</li></ul></li><li><p>css</p><ul><li>.css    .less   .sass    .scss</li></ul></li><li><p>images</p><ul><li>.jpg    .png   .gif   .bmp    .svg</li></ul></li><li><p>字体文件(Fonts)</p><ul><li>.svg   .ttf    .rot    .woff  .woff2</li></ul></li><li><p>模板文件</p><ul><li>.ejs   .jade   .vue【这是在webpack中定义组件的方式，推荐这么用】</li></ul></li></ol><h2 id="网页中引入的静态资源多了以后有什么问题？？"><a href="#网页中引入的静态资源多了以后有什么问题？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？"></a>网页中引入的静态资源多了以后有什么问题？？</h2><ol><li>网页加载速度慢，因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h2 id="如何解决上述两个问题？"><a href="#如何解决上述两个问题？" class="headerlink" title="如何解决上述两个问题？"></a>如何解决上述两个问题？</h2><p>1.合并、压缩。精灵图、图片的Base64编码(小图片才更好)</p><p>2.可以使用requireJS ， 也可以使用webpack解决各个包之间的复杂依赖关系</p><h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>webpack 是前端的一个项目构建工具，它是基于Node.js 开发出来的一个前端工具</p><h2 id="如何完美实现上述的2中解决方案"><a href="#如何完美实现上述的2中解决方案" class="headerlink" title="如何完美实现上述的2中解决方案"></a>如何完美实现上述的2中解决方案</h2><p>1.使用Gulp， 是基于task任务的 (只能处理部分)</p><p>2.使用webpack，是基于整个项目进行构建的</p><ul><li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能</li><li><a href="https://webpack.github.io" target="_blank" rel="noopener">webpack官网</a>     里面有介绍打包的过程</li></ul><h2 id="webpack-安装的两种方式"><a href="#webpack-安装的两种方式" class="headerlink" title="webpack 安装的两种方式"></a>webpack 安装的两种方式</h2><p>1.运行<code>npm i webpack -g</code>全局安装webpack ,这样就能在全局使用webpack的命令</p><p>2.在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</p><h2 id="初步使用webpack打包构建列表隔行变色案例"><a href="#初步使用webpack打包构建列表隔行变色案例" class="headerlink" title="初步使用webpack打包构建列表隔行变色案例"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol><li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包 ps:如果项目名不含中文后面加<code>-y</code></li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装jquery类库</li><li>创建<code>main.js</code>并书写隔行变色的代码逻辑</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是main.js 是我们项目的Js入口文件</span></span><br><span class="line"><span class="comment">//实现隔行变色的效果</span></span><br><span class="line"><span class="comment">//import ** from *** 是es6中导入模块的方式</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="comment">// const $ = require('jquery')</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>)</span><br><span class="line">    $(<span class="string">'li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'lightgreen'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>这个时候会报<code>syntaxError</code>语法错误，因为import是ES6的语法，浏览器不能识别这种高级JS语法，这个时候就需要用到webpack包装了。webpack默认会把这种高级的语法转换成浏览器能识别的语法</li><li>最后把包装好的js文件链接到html中去</li></ol><h2 id="使用webpack的配置文件简化打包时候的命令"><a href="#使用webpack的配置文件简化打包时候的命令" class="headerlink" title="使用webpack的配置文件简化打包时候的命令"></a>使用webpack的配置文件简化打包时候的命令</h2><ol><li>在项目根目录中创建webpack.config.js</li><li>由于每次包装都要输入<code>webpack 要打包的文件 打包后的文件</code>，为了省去后面的文件名，直接在webpack.config.js中配置这两个路径：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入处理路径的模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        entry: path.resolve(__dirname, <span class="string">'src/js/main.js'</span>), <span class="comment">// 项目入口文件</span></span><br><span class="line">        output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">            path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 配置输出的路径</span></span><br><span class="line">            filename: <span class="string">'bundle.js'</span> <span class="comment">// 配置输出的文件名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有了这个我们打包是就直接<code>webpack</code>就能打包了不需要加文件名</p><h1 id="webpack基本配置"><a href="#webpack基本配置" class="headerlink" title="webpack基本配置"></a>webpack基本配置</h1><ol><li>在项目根目录中创建webpack.config.js</li><li>由于每次包装都要输入<code>webpack 要打包的文件 打包后的文件</code>，为了省去后面的文件名，直接在webpack.config.js中配置这两个路径：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入处理路径的模块</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">//导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">        entry: path.resolve(__dirname, <span class="string">'src/js/main.js'</span>), <span class="comment">// 项目入口文件</span></span><br><span class="line">        output: &#123; <span class="comment">// 配置输出选项</span></span><br><span class="line">            path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 配置输出的路径</span></span><br><span class="line">            filename: <span class="string">'bundle.js'</span> <span class="comment">// 配置输出的文件名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>webpack-dev-server是一个小型的Node.js Express服务器,它使用webpack-dev-middleware来服务于webpack的包 </p><ul><li>在终端输入<code>npm i webpack-dev-server -D</code></li></ul></li><li><p>package.json中 scripts字段中 加入 <code>&quot;dev&quot;: &quot;webpack-dev-server --open --port 3000 --hot&quot;</code></p></li></ol><ul><li>–open:运行dev时会自动打开页面 –port 3000 表示端口号改为3000 默认为8080 –hot是启动热模块替换</li></ul><ol start="5"><li><p>配置html-webpack-plugin</p><ul><li><p>安装这个插件后就可以在主页面中自动链接打包后的js</p></li><li><p>在终端输入<code>npm i html-webpack-plugin -D</code></p></li><li><p>然后加入以下代码</p></li><li><pre><code class="js"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)<span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">//导入插件</span><span class="built_in">module</span>.exports = {  entry: path.join(__dirname, <span class="string">'./src/main.js'</span>), <span class="comment">// 入口文件</span>  output: { <span class="comment">// 指定输出选项</span>    path: path.join(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出路径</span>    filename: <span class="string">'bundle.js'</span> <span class="comment">// 指定输出文件的名称</span>  },  plugins: [ <span class="comment">// 所有webpack  插件的配置节点</span>    <span class="keyword">new</span> htmlWebpackPlugin({      template: path.join(__dirname, <span class="string">'./src/index.html'</span>), <span class="comment">// 指定模板文件路径</span>      filename: <span class="string">'index.html'</span> <span class="comment">// 设置生成的内存页面的名称</span>    })  ]}&lt;!--￼<span class="number">3</span>--&gt;</code></pre></li><li><p>在终端输入<code>cnpm i style-loader css-loader less-loader less sass-loader node-sass url-loader -D</code>安装</p></li><li><p>注意：less-loader需要额外安装less sass-loader需要额外安装node-sass 有些ES6语法webpack无法处理，就用了<code>babel-loader</code></p></li><li><p>安装babel需要安装两套包:</p><ul><li><p><code>cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</code></p></li><li><p><code>cnpm i babel-preset-env babel-preset-stage-0 -D</code></p></li><li><p>在module中加入rules时需要加入<code>exclude: /node_modules/</code>  是为了避免把node_modules中的高级语法也编译了 影响运行速度</p></li><li><p>新建一个.babel的文件，在里面加入</p></li><li><pre><code class="babel">{  &quot;presets&quot;: [&quot;env&quot;, &quot;stage-0&quot;],  &quot;plugins&quot;: [&quot;transform-runtime&quot;]}</code></pre></li><li></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-js-webpack&quot;&gt;&lt;a href=&quot;#Vue-js-webpack&quot; class=&quot;headerlink&quot; title=&quot;Vue.js webpack&quot;&gt;&lt;/a&gt;Vue.js webpack&lt;/h1&gt;&lt;h2 id=&quot;在网页中会引用哪些常见的静态资源？
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
